buildscript {
    repositories {
        mavenCentral()
        maven { url "http://files.minecraftforge.net/maven" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.0.4'
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}

apply plugin: 'maven-publish'

def build_number = 'CUSTOM'

if (System.getenv('BUILD_NUMBER') != null)
    build_number = System.getenv('BUILD_NUMBER')

group = package_group
archivesBaseName = mod_name
version = "${mc_version}-${mod_version}-${build_number}"

// Ignore this error. It'll work just fine when building.
import org.ajoberstar.grgit.*

ext.repo = Grgit.open(project.file('.'))
def gitHash = 'unknown'

if (new File(projectDir, '.git').exists())
    gitHash = repo.log().find().abbreviatedId

repositories {
    maven {	url "http://mobiusstrip.eu/maven" }
    maven { url "http://dvs1.progwml6.com/files/maven" }
    maven { url "http://tehnut.info/maven" }
    maven { url "http://www.teambrmodding.com/maven2/" }
	maven { url "http://maven.k-4u.nl/" }

    ivy {
        name "Thaumcraft"
        artifactPattern "https://dl.dropboxusercontent.com/u/47135879/[module]-[revision]-deobf.[ext]"
    }
    ivy {
        name "Baubles"
        artifactPattern "https://dl.dropboxusercontent.com/u/47135879/[module]-[revision]-deobf.[ext]"
    }
}

dependencies {
    compile "org.projectlombok:lombok:1.16.4"
    compile name: 'Thaumcraft', 'version': "${mc_version}-${thaumcraft_version}", ext: 'jar'
    compile name: 'Baubles', 'version': "${mc_version}-${baubles_version}", ext: 'jar'
    compile "com.dyonovan.neotech:NeoTech:${mc_version}-${neotech_version}:dev"
    compile "com.teambr.bookshelf:Bookshelf:${mc_version}-${bookshelf_version}:dev"
    deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}"
    deobfCompile "mcp.mobius.waila:Waila:${waila_version}_1.8.8"
    deobfCompile "com.wayoftime.bloodmagic:BloodMagic:${mc_version}-${bloodmagic_version}"
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    replace "@VERSION@", project.version
    replaceIn "ModInformation.java"

    if (project.hasProperty('mappings_version'))
        mappings = project.mappings_version
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

jar {
    classifier = ''
    manifest.mainAttributes(
        "Built-By": System.getProperty('user.name'),
        "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
        "Implementation-Title": project.name,
        "Implementation-Version": project.version,
        "Git-Hash": gitHash
    )
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}


tasks.build.dependsOn sourceJar, javadocJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
            artifact javadocJar
        }
    }
    repositories {
        if (project.hasProperty('maven_repo')) {
            maven { url maven_repo }
        } else {
            mavenLocal()
        }
    }
}

curseforge {
    if (project.hasProperty('curse_key'))
        apiKey = project.curse_key

    project {
        id = "${curse_id}"
		changelog = project.hasProperty('changelog') ? project.changelog : ''
        releaseType = 'alpha'

        addArtifact sourceJar
        addArtifact javadocJar
    }
}
