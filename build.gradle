buildscript {
    repositories {
        mavenCentral()
        maven { url "http://files.minecraftforge.net/maven" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.0.4'
    id "net.minecraftforge.gradle.forge" version "2.0.2"
    id 'io.franzbecker.gradle-lombok' version '1.6'
}

apply plugin: 'maven-publish'

configurations {
    shade
    compile.extendsFrom shade
}

def build_number = 'CUSTOM'

if (System.getenv('BUILD_NUMBER') != null)
    build_number = System.getenv('BUILD_NUMBER')

def username = 'ResourcefulCrops'

if (project.hasProperty('dev_username'))
    username = "${dev_username}"

group = package_group
archivesBaseName = mod_name
version = "${mc_version}-${mod_version}-${build_number}"

// Ignore this error. It'll work just fine when building.
import org.ajoberstar.grgit.*

ext.repo = Grgit.open(project.file('.'))
def gitHash = 'unknown'

if (new File(projectDir, '.git').exists())
    gitHash = repo.log().find().abbreviatedId

repositories {
    maven {	url "http://mobiusstrip.eu/maven" }
    maven { url "http://dvs1.progwml6.com/files/maven" }
    maven { url "http://tehnut.info/maven" }
    maven { url "http://maven.tterrag.com" }
}

dependencies {
    deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}"
    deobfCompile "mcp.mobius.waila:Waila:${waila_version}_${mc_version}"
    deobfCompile "com.wayoftime.bloodmagic:BloodMagic:${mc_version}-${bloodmagic_version}:api"
    deobfCompile "com.enderio:EnderIO:${mc_version}-${enderio_version}"
    deobfCompile "com.enderio.core:EnderCore:${mc_version}-${endercore_version}"
    shade "tehnut.lib:LendingLibrary:${mc_version}-${lendinglibrary_version}"
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    replace "@VERSION@", project.version
    replaceIn "ModInformation.java"

    clientRunArgs += "--username=${username}"

    if (project.hasProperty('mappings_version'))
        mappings = project.mappings_version
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

lombok {
    version = "1.16.6"
    sha256 = "e0a471be03e1e6b02bf019480cec7a3ac9801702bf7bf62f15d077ad4df8dd5d"
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask) {
    args("src/main/java", "-d", "build/sources/delomboked/java")
}

tasks.eclipse.dependsOn installLombok

reobf {
    jar {
        extraLines "PK: tehnut/lib tehnut/resourceful/shade/lib"
    }
}

jar {
    classifier = ''
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    manifest.mainAttributes(
        "Built-By": System.getProperty('user.name'),
        "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
        "Implementation-Title": project.name,
        "Implementation-Version": project.version,
        "Git-Hash": gitHash
    )
}

// API jar
task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'tehnut/resourceful/crops/api/**/*'
    classifier = 'api'
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

javadoc {
    source = projectDir.path + "/build/sources/delomboked/java"
}

tasks.javadoc.dependsOn delombok
tasks.build.dependsOn javadoc, javadocJar, apiJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
            artifact javadocJar
        }
    }
    repositories {
        if (project.hasProperty('maven_repo')) {
            maven { url maven_repo }
        } else {
            mavenLocal()
        }
    }
}

def curseRelations = {
    optionalLibrary 'waila'
    optionalLibrary 'neotech'
    optionalLibrary 'blood-magic'
    optionalLibrary 'thaumcraft'
}

curseforge {
    if (project.hasProperty('curse_key'))
        apiKey = project.curse_key

    project {
        id = "${curse_id}"
		changelog = project.hasProperty('changelog') ? project.changelog : ''
        releaseType = 'alpha'

        addGameVersion '1.10'
        addGameVersion '1.10.2'

        relations curseRelations

        addArtifact sourceJar
        addArtifact javadocJar
        addArtifact apiJar
    }
}